from viper.evaluation.constants import *
import os
import re
from viper.util import latex
from viper.evaluation.util import get_config_names
from viper.evaluation.latex_macros import MACROS_FILE
from viper.evaluation.latex_macros import MACRO_MAX_REWARD_DEPTH
from viper.evaluation.latex_macros import MACRO_MAX_REWARD_EFFECTIVE_DEPTH
from viper.evaluation.latex_macros import MACRO_AVG_ACROSS_CONFIGS

TABLES_DIR = '../../paper/icml2020/tables'

TABLE_SOLO = "{}_{}_Eval_Pick-{}"
# Name of the table for evaluating models for a given depth.
TABLE_EVAL_DEPTH = "EvalMatchingDepth_Pick-{}"
# Name of the table for evaluating models for a given effective depth.
TABLE_EVAL_EFFECTIVE_DEPTH = "EvalMatchingEffectiveDepth_Pick-{}"
TABLE_AVG_ACROSS_CONFIGS = "AvgAcrossConfigs"


def create_table_solo(subject, model, criteria):
    """
    Creates a table for each subject and model.
    """
    filename = TABLE_SOLO.format(subject, model, criteria)
    path = os.path.join(TABLES_DIR, filename)

    configs = get_config_names(subject, model)
    with open(path, 'w') as f:
        f.write('''%% This file is automatically generated.\n''')
        if model == 'ViperPlus':
            f.write('''\\begin{tabular}{ccc}\n''')
            f.write('''\\toprule\n''')
            f.write('\TNC{1}{\HighlightCell{\DepthTbl}}'
                    + ' & \TNC{1}{\HighlightCell{\RewardTbl}}'
                    + ' & \TNC{1}{\HighlightCell{\MispredictionTbl}}\\\\\n')
        else:
            f.write('''\\begin{tabular}{cccc}\n''')
            f.write('''\\toprule\n''')
            f.write('\\TNC{1}{\HighlightCell{\ExpertsTbl}}'
                    + ' & \TNC{1}{\HighlightCell{\DepthTbl}}'
                    + ' & \TNC{1}{\HighlightCell{\RewardTbl}}'
                    + ' & \TNC{1}{\HighlightCell{\MispredictionTbl}}\\\\\n')
        f.write('''\\midrule\n''')

        for config in configs:
            reward_macro_name = '_{}_{}_{}_reward_{}'.format(
                subject, model, config, criteria)
            reward_macro = latex.create_usage(reward_macro_name)
            mispredictions_macro = latex.create_usage(
                '_{}_{}_{}_mispredictions_student_playing_{}'.
                    format(subject, model, config, criteria))

            found = False
            for line in open(MACROS_FILE, 'r'):
                if re.search(reward_macro_name, line):
                    found = True
            if not found:
                continue

            if model == 'ViperPlus':
                m = re.match('d(?P<depth>[^_]+)', config)
                depth = m.group('depth')
                f.write('{} & '.format(depth))
            else:
                m = re.match('e(?P<experts>[^_]+)_d(?P<depth>[^_]+)', config)
                depth = m.group('depth')
                experts = m.group('experts')
                f.write('{} & {} & '.format(experts, depth))

            f.write('{} & '.format(reward_macro))
            f.write('{}\% '.format(mispredictions_macro))

            f.write('\\\\\n')

        f.write('''\\bottomrule\n''')
        f.write('''\\end{tabular}\n''')


def create_table_depth(subject, criteria):
    filename = '{}_{}.tex'.format(subject,
                                  TABLE_EVAL_DEPTH.format(criteria))
    path = os.path.join(TABLES_DIR, filename)

    with open(path, 'w') as f:
        f.write('''%% This file is automatically generated.\n''')
        f.write('''\\begin{tabular}{c|rr|rrr|rrr}\n''')
        f.write('''\\toprule\n''')
        f.write('\\TNC{1}{} \\vline'
                + ' & \TNC{2}{\HighlightCell{\ViperTbl}} \\vline'
                + ' & \TNC{3}{\HighlightCell{\MOETbl}} \\vline'
                + ' & \TNC{3}{\HighlightCell{\MOEHardTbl}}\\\\\n')
        f.write('\\TNC{1}{\HighlightCell{\DepthTbl}} \\vline'
                + ' & \TNC{1}{\HighlightCell{\RewardTbl}}'
                + ' & \TNC{1}{\HighlightCell{\MispredictionTbl}} \\vline'
                + ' & \TNC{1}{\HighlightCell{\RewardTbl}}'
                + ' & \TNC{1}{\HighlightCell{\MispredictionTbl}}'
                + ' & \TNC{1}{\HighlightCell{\ExpertsTbl}} \\vline'
                + ' & \TNC{1}{\HighlightCell{\RewardTbl}}'
                + ' & \TNC{1}{\HighlightCell{\MispredictionTbl}}'
                + ' & \TNC{1}{\HighlightCell{\ExpertsTbl}}\\\\\n')
        f.write('''\\midrule\n''')

        for depth in DEPTHS[subject]:
            config = 'd{}'.format(depth)
            f.write('{} '.format(depth))

            for model in ['ViperPlus', 'MOE', 'MOEHard']:
                prefix = MACRO_MAX_REWARD_DEPTH.format(criteria)
                reward_macro = latex.create_usage(
                    '{}_{}_{}_{}_reward_{}'.format(
                        prefix, subject, model, config, criteria))
                mispredictions_macro = latex.create_usage(
                    '{}_{}_{}_{}_mispredictions_student_playing_{}'
                    .format(prefix, subject, model, config, criteria))

                f.write('& {} '.format(reward_macro))
                f.write('& {}\% '.format(mispredictions_macro))

                if model != 'ViperPlus':
                    best_config_macro = latex.create_usage(
                        '{}_{}_{}_{}_experts'.
                            format(prefix, subject, model, config))
                    f.write('& {} '.format(best_config_macro))

            f.write('\\\\\n')

        f.write('''\\bottomrule\n''')
        f.write('''\\end{tabular}\n''')


def create_table_effective_depth_header(f):
    f.write('''%% This file is automatically generated.\n''')
    f.write('''\\begin{tabular}{c|rr|rrr|rrr}\n''')
    f.write('''\\toprule\n''')
    f.write('\\TNC{1}{} \\vline'
            + ' & \TNC{2}{\HighlightCell{\ViperTbl}} \\vline'
            + ' & \TNC{3}{\HighlightCell{\MOETbl}} \\vline'
            + ' & \TNC{3}{\HighlightCell{\MOEHardTbl}}\\\\\n')
    f.write('\\TNC{1}{\HighlightCell{\DepthTbl}} \\vline'
            + ' & \TNC{1}{\HighlightCell{\RewardTbl}}'
            + ' & \TNC{1}{\HighlightCell{\MispredictionTbl}} \\vline'
            + ' & \TNC{1}{\HighlightCell{\RewardTbl}}'
            + ' & \TNC{1}{\HighlightCell{\MispredictionTbl}}'
            + ' & \TNC{1}{\HighlightCell{C}} \\vline'
            + ' & \TNC{1}{\HighlightCell{\RewardTbl}}'
            + ' & \TNC{1}{\HighlightCell{\MispredictionTbl}}'
            + ' & \TNC{1}{\HighlightCell{C}}\\\\\n')
    f.write('''\\midrule\n''')


def models_with_highest_reward_for_effective_depth(
    viperMacro, moetMacro, subject, effective_depth, criteria):
    config = 'd{}'.format(effective_depth)
    models = ['ViperPlus', 'MOE', 'MOEHard']
    rewards = []
    for model in models:
        if model == 'ViperPlus':
            prefix = viperMacro.format(criteria)
        else:
            prefix = moetMacro.format(criteria)
        macro_name = '{}_{}_{}_{}_reward_{}'.format(
            prefix, subject, model, config, criteria)

        reward = 0
        for line in open(MACROS_FILE, 'r'):
            if re.search(macro_name, line):
                reward = float(latex.unpack_latex_macro(line)[1])
        rewards.append(reward)

    best_models = []
    max_reward = max(rewards)
    for i, value in enumerate(rewards):
        if value == max_reward:
            best_models.append(models[i])
    return best_models


def models_with_lowest_mispredictions_for_effective_depth(
    viperMacro, moetMacro, subject, effective_depth, criteria):
    config = 'd{}'.format(effective_depth)
    models = ['ViperPlus', 'MOE', 'MOEHard']
    mispredictions = []
    for model in models:
        if model == 'ViperPlus':
            prefix = viperMacro.format(criteria)
        else:
            prefix = moetMacro.format(criteria)
        macro_name = '{}_{}_{}_{}_mispredictions_student_playing_{}'.format(
            prefix, subject, model, config, criteria)

        mispredictions_current = 100
        for line in open(MACROS_FILE, 'r'):
            if re.search(macro_name, line):
                mispredictions_current = float(latex.unpack_latex_macro(line)[1])
        mispredictions.append(mispredictions_current)

    best_models = []
    min_mispredictions = min(mispredictions)
    for i, value in enumerate(mispredictions):
        if value == min_mispredictions:
            best_models.append(models[i])
    return best_models


def create_table_effective_depth_content(f, subject, criteria):
    for effective_depth in DEPTHS[subject]:
        config = 'd{}'.format(effective_depth)
        f.write('{} '.format(effective_depth))

        best_reward_models = models_with_highest_reward_for_effective_depth(
            MACRO_MAX_REWARD_DEPTH, MACRO_MAX_REWARD_EFFECTIVE_DEPTH, subject,
            effective_depth, criteria)
        best_mispredictions_models = models_with_lowest_mispredictions_for_effective_depth(
            MACRO_MAX_REWARD_DEPTH, MACRO_MAX_REWARD_EFFECTIVE_DEPTH, subject,
            effective_depth, criteria)

        for model in ['ViperPlus', 'MOE', 'MOEHard']:
            if model == 'ViperPlus':
                prefix = MACRO_MAX_REWARD_DEPTH.format(criteria)
            else:
                prefix = MACRO_MAX_REWARD_EFFECTIVE_DEPTH.format(criteria)

            reward_macro = latex.create_usage('{}_{}_{}_{}_reward_{}'.
                                              format(prefix,
                                                     subject,
                                                     model,
                                                     config,
                                                     criteria))
            mispredictions_macro = latex.create_usage(
                '{}_{}_{}_{}_mispredictions_student_playing_{}'.
                    format(prefix, subject, model, config, criteria))

            if model in best_reward_models:
                f.write('& \\textbf{{{0}}} '.format(reward_macro))
            else:
                f.write('& {} '.format(reward_macro))

            if model in best_mispredictions_models:
                f.write('& \\textbf{{{0}}}\% '.format(mispredictions_macro))
            else:
                f.write('& {}\% '.format(mispredictions_macro))

            if model != 'ViperPlus':
                best_config_macro = latex.create_usage(
                    '{}_{}_{}_{}_best-config'.
                        format(prefix, subject, model, config))
                f.write('& {} '.format(best_config_macro))

        f.write('\\\\\n')


def create_table_effective_depth(subject, criteria):
    filename = '{}_{}.tex'.format(subject,
                                  TABLE_EVAL_EFFECTIVE_DEPTH.format(criteria))
    path = os.path.join(TABLES_DIR, filename)

    with open(path, 'w') as f:
        create_table_effective_depth_header(f)

        create_table_effective_depth_content(f, subject, criteria)

        f.write('''\\bottomrule\n''')
        f.write('''\\end{tabular}\n''')


def create_table_effective_depth_all_subjects(criteria):
    filename = '{}.tex'.format(TABLE_EVAL_EFFECTIVE_DEPTH.format(criteria))
    path = os.path.join(TABLES_DIR, filename)

    with open(path, 'w') as f:
        create_table_effective_depth_header(f)

        for idx, subject in enumerate(SUBJECTS):
            f.write('\TNC{{9}}{{\{}}} \\\\\n'.format(subject.capitalize()))
            f.write('\\midrule\n')
            f.write('\n')

            create_table_effective_depth_content(f, subject, criteria)

            f.write('\n')
            if idx < len(SUBJECTS) - 1:
                f.write('\midrule\n')

        f.write('''\\bottomrule\n''')
        f.write('''\\end{tabular}\n''')


def create_table_average_across_configs():
    filename = '{}.tex'.format(TABLE_AVG_ACROSS_CONFIGS)
    path = os.path.join(TABLES_DIR, filename)
    criteria = 'avg'

    with open(path, 'w') as f:
        f.write('''%% This file is automatically generated.\n''')
        f.write('''\\begin{tabular}{c|rr|rr|rr}\n''')
        f.write('''\\toprule\n''')
        f.write('\\TNC{1}{} \\vline'
                + ' & \TNC{2}{\HighlightCell{\ViperTbl}} \\vline'
                + ' & \TNC{2}{\HighlightCell{\MOETbl}} \\vline'
                + ' & \TNC{2}{\HighlightCell{\MOEHardTbl}}\\\\\n')
        f.write('\\TNC{1}{\HighlightCell{\DepthTbl}} \\vline'
                + ' & \TNC{1}{\HighlightCell{\RewardTbl}}'
                + ' & \TNC{1}{\HighlightCell{\MispredictionTbl}} \\vline'
                + ' & \TNC{1}{\HighlightCell{\RewardTbl}}'
                + ' & \TNC{1}{\HighlightCell{\MispredictionTbl}} \\vline'
                + ' & \TNC{1}{\HighlightCell{\RewardTbl}}'
                + ' & \TNC{1}{\HighlightCell{\MispredictionTbl}}\\\\\n')
        f.write('''\\midrule\n''')

        for idx, subject in enumerate(SUBJECTS):
            f.write('\TNC{{7}}{{\{}}} \\\\\n'.format(subject.capitalize()))
            f.write('\\midrule\n')
            f.write('\n')

            for effective_depth in DEPTHS[subject]:
                config = 'd{}'.format(effective_depth)
                f.write('{} '.format(effective_depth))

                best_reward_models = models_with_highest_reward_for_effective_depth(
                    MACRO_MAX_REWARD_DEPTH, MACRO_AVG_ACROSS_CONFIGS,
                    subject,
                    effective_depth, criteria)
                best_mispredictions_models = models_with_lowest_mispredictions_for_effective_depth(
                    MACRO_MAX_REWARD_DEPTH, MACRO_AVG_ACROSS_CONFIGS,
                    subject,
                    effective_depth, criteria)

                for model in ['ViperPlus', 'MOE', 'MOEHard']:
                    if model == 'ViperPlus':
                        prefix = MACRO_MAX_REWARD_DEPTH.format(criteria)
                    else:
                        prefix = MACRO_AVG_ACROSS_CONFIGS.format(criteria)

                    reward_macro = latex.create_usage('{}_{}_{}_{}_reward_{}'.
                                                      format(prefix,
                                                             subject,
                                                             model,
                                                             config,
                                                             criteria))
                    mispredictions_macro = latex.create_usage(
                        '{}_{}_{}_{}_mispredictions_student_playing_{}'.
                            format(prefix, subject, model, config, criteria))

                    if model in best_reward_models:
                        f.write('& \\textbf{{{0}}} '.format(reward_macro))
                    else:
                        f.write('& {} '.format(reward_macro))

                    if model in best_mispredictions_models:
                        f.write(
                            '& \\textbf{{{0}}}\% '.format(mispredictions_macro))
                    else:
                        f.write('& {}\% '.format(mispredictions_macro))

                f.write('\\\\\n')

            f.write('\n')
            if idx < len(SUBJECTS) - 1:
                f.write('\midrule\n')

        f.write('''\\bottomrule\n''')
        f.write('''\\end{tabular}\n''')


def create_tables():
    for criteria in ['best', 'avg']:
        create_table_effective_depth_all_subjects(criteria)
        for subject in SUBJECTS:
            create_table_depth(subject, criteria)
            create_table_effective_depth(subject, criteria)
    create_table_average_across_configs()
    for subject in SUBJECTS:
        for model in ['MOE', 'MOEHard', 'ViperPlus']:
            create_table_solo(subject, model, criteria='avg')


def main():
    create_tables()


if __name__ == '__main__':
    main()
